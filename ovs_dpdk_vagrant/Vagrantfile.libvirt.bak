# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require the reboot plugin.
#require './vagrant-provision-reboot-plugin'

$install_upstart = <<SCRIPT
  apt-get update
  apt-get install -y upstart-sysv
  update-initramfs -u
    # to support the 1GB hugepage 
    sed 's/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0 "/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0 default_hugepagesz=1G hugepagesz=1G hugepages=12 hugepagesz=2M hugepages=2048 iommu=pt intel_iommu=on isolcpus=1-4,6-8"/' -i /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg      
    # or 
    # update-grub
SCRIPT

$bootstrap = <<SCRIPT
  apt-get purge -y systemd 
  apt-get autoremove
  apt-get install -y curl git-core vim
  apt-get install -y fabric
  apt-get install -y bridge-utils
  apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
  apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main'
  apt-get update
  apt-cache policy docker-engine
  apt-get install -y docker-engine
  apt-get install util-linux
  usermod -a -G docker ubuntu
  docker pull alpine:3.3
    # For ovs-dpdk
  apt-get install -y python-six 
  apt-get install -y dh-autoreconf 
  apt-get install -y clang-3.8 
  apt-get install -y libfuse-dev 
  apt-get install -y fuse
SCRIPT

$dpdk = <<SCRIPT
    cd /usr/src/
    wget http://fast.dpdk.org/rel/dpdk-16.11.1.tar.xz
    tar xf dpdk-16.11.1.tar.xz
    # Need to export all the env once
    export DPDK_DIR=/usr/src/dpdk-stable-16.11.1
    export DPDK_TARGET=x86_64-native-linuxapp-gcc
    export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET
    cd $DPDK_DIR
    make install T=$DPDK_TARGET DESTDIR=install
    # after make, insert the mode
    modprobe uio
    insmod $DPDK_BUILD/kmod/igb_uio.ko
SCRIPT

$dockerbuild = <<SCRIPT
    export DPDK_DIR=/usr/src/dpdk-stable-16.11.1
    export DPDK_TARGET=x86_64-native-linuxapp-gcc
    export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET
    cd $DPDK_DIR
    echo "FROM ubuntu:latest" >> Dockerfile
    echo "WORKDIR /usr/src/dpdk-stable-16.11.1" >> Dockerfile
    echo "COPY . /usr/src/dpdk-stable-16.11.1" >> Dockerfile
    echo "ENV PATH \"\$PATH:/usr/src/dpdk-stable-16.11.1/x86_64-native-linuxapp-gcc/app/\"" >> Dockerfile 
    # build docker 
    docker build -t dpdk-app-testpmd .
SCRIPT

$ovs = <<SCRIPT
    cd ~/Downloads
    wget http://openvswitch.org/releases/openvswitch-2.7.0.tar.gz
    tar -xf openvswitch-2.7.0.tar.gz
    cd ~/Downloads/openvswitch-2.7.0/
    export DPDK_DIR=/usr/src/dpdk-stable-16.11.1
    export DPDK_TARGET=x86_64-native-linuxapp-gcc
    export DPDK_BUILD=$DPDK_DIR/$DPDK_TARGET
    ./boot.sh
    ./configure --with-dpdk=$DPDK_BUILD
    make
    make install
SCRIPT

$postinstall = <<SCRIPT
  iptables --policy FORWARD ACCEPT
  iptables-save -c > /etc/iptables.rules
  #below is hacky - but xenial+upstart is really headache
  sed -i '/exit 0/i \
        iptables-restore < /etc/iptables.rules \
        exit 0' /etc/rc.local
SCRIPT

Vagrant.configure("2") do |config|
    config.vm.provider :libvirt do |libvirt|
        libvirt.driver = "kvm"
        libvirt.host = 'localhost'
        libvirt.uri = 'qemu:///system'
        libvirt.cpu_feature :name => 'pdpe1gb', :policy => 'force'
    end
    #config.ssh.insert_key = false
    #config.ssh.private_key_path = File.expand_path('~/.ssh/id_rsa')
    #config.ssh.forward_agent = true

    config.vm.define "new" do |custombox|
        custombox.vm.box = "ican"       
        custombox.vm.provider :libvirt do |test|
            test.memory = 1024
            test.cpus = 1
        end
        custombox.vm.provision "install_upstart", type: "shell", run: "once", privileged: true, inline: $install_upstart  
        #custombox.vm.provision :unix_reboot
        custombox.vm.provision "bootstrap", type: "shell", run: "once", privileged: true, inline: $bootstrap
        custombox.vm.provision "dpdk", type: "shell", run: "once", privileged: true, inline: $dpdk
        custombox.vm.provision "ovs", type: "shell", run: "once", privileged: true, inline: $ovs
        custombox.vm.provision "dockerbuild", type: "shell", run: "once", privileged: true, inline: $dockerbuild
        custombox.vm.provision "postinstall", type: "shell", run: "once", privileged: true, inline: $postinstall
    end
end
